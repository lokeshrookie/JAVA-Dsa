
Linear Search: pseudo code

                    for(int i = 0; i<arr.length; i++){
                        if(arr[i] == target){
                            return i; // found, then print index.
                        }
                    }
                    return -1;
                    // print not found.




Code :
                private static int linear(int[] arr, int target) {
                        int i ;
                        for ( i = 0; i < arr.length; i++) {

                            if(target == arr[i]){
                                return i;
                            }
                        }
                        return -1;
                    }



Binary Search:

                    int start = 0;
                    int end = arr.length;
                    while(start <= end){
                        int mid = start + ( end - start )/2
                        if(arr[mid] == target){
                            return mid;
                        }
                        else if(target < arr[mid]){
                            end = mid -1;
                        }
                        else{
                            start = mid + 1;
                        }
                    }







Sorting:

      Bubble Sorting:  private static int[] bubble(int[] arr) {
                            for (int i = 0; i < arr.length; i++) {
                                for (int j = 1; j < arr.length; j++) {
                                    if(arr[j] < arr[j-1]){
                                        int temp = arr[j];
                                        arr[j] = arr[j-1];
                                        arr[j-1]  = temp;

                                    }

                                }
                            }
                            return arr;
                        }

             O(N)^2



    Selection Sort:

         for(int i = 0; i< arr.length; i++){
                    int last = arr.length - i - 1; //
                    int max = maxIndex(arr, 0, last );
                    swap(arr, max, last);
                }



        Code:
                      private static void selection(int[] arr) {
                            for (int i = 0; i < arr.length; i++) {
                                int last = arr.length-i-1;
                                int max = maxIndex(arr, 0, last);
                                swap(arr, max, last);
                            }
                        }

                        private static void swap(int[] arr, int max, int last) {
                            int temp = arr[max];
                            arr[max] = arr[last];
                            arr[last] = temp;
                        }

                        private static int maxIndex(int[] arr, int first, int last) {
                            int maxi = 0;
                            for (int i = first; i <= last; i++) {
                                if(arr[i] > arr[maxi]){
                                    maxi = i;
                                }
                            }
                            return  maxi;
                        }


            1. Selecting the largest element and putting it at the correct index by swapping.
            2. last index will be sorted first. then the next largest element and so no...
            3.

            Complexity:
                finding max element: n is size . (n-1) comparisons needed.
                         n(n-1)/2
                O(N)^2
                best case : O(N)^2
                worst case: O(N)^2
                stable : NO
                performs well at small cases.


    InsertionSort:

                    Output:

                    [4, 1, 11, 6] after j = 2 i = 1
                    [1, 4, 11, 6] after j = 1 i = 1
                    [1, 4, 6, 11] after j = 3 i = 2
                    [1, 4, 6, 11]


                    1. Starting from the left side of the array, sort one by one.
                    for i = 0, j = i+1.
                    then we have to loop from i = 0 to i < arr.length -1  ( <=arr.length-2)

                    2. Left side array is sorted part. for every iteration, we will insert the
                        right side element one by one to its position in the left side array.

                    3. j = i+1 ; j>0; j--;

                    3. if (arr[j] < arr[j-1]) == true , then swapping will be done. if not, then break. because,
                         right side array is sorted and if j-1 is less than j , then j-1 will also be less than j.
                         so, we dont need to check for the condition.


                    Code :
                                    private static void insertion(int[] arr) {
                                         for (int i = 0; i < arr.length-1; i++) {
                                             for (int j = i+1; j > 0; j--) {
                                                 if(arr[j] < arr[j-1]){
                                                     swap(arr, j, j-1);
                                                 }
                                                 else
                                                     break;
                                             }
                                         }
                                     }

                                     private static void swap(int[] arr, int max, int last) {
                                         int temp = arr[max];
                                         arr[max] = arr[last];
                                         arr[last] = temp;
                                     }








    Cyclic Sort:        used for numbers in a range upto N.



                            private static void cyclic(int[] arr) {
                                int i = 0;
                                while(i<arr.length){
                                    int correct = arr[i] - 1; // 3 has to be at index 2 ( 3-1).
                                    if(arr[i] != arr[correct]){
                                        swap(arr, i, correct);
                                    }
                                    else
                                        i++;

                                }
                            }


                            private static void swap(int[] arr, int max, int last) {
                                int temp = arr[max];
                                arr[max] = arr[last];
                                arr[last] = temp;
                            }





