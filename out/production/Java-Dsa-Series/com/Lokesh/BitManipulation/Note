
    Bit Manipulation

    1. AND - &:

            Ture Only When both are true. False when at least one is False.
            1 only when both are 1.

            Observations:
                1. 1&x = x. ( digits will remain same).


    2.OR - |
            Ture only when any one of the condition is true.
            1 only when at least one value is 1.

    3. XOR - ^
            True only when both are different.

            Observations:
               a^1 = a complement
               a^0 = a
               a^a = 0

    4. complement - ~
            1~ = 0
            0~ = 1



    NUMBER SYSTEMS:
            Decimal(0 to 9) = Base = 10
            BInary(0 , 1) = Base = 2
            Octal(0 to 7) --- Base = 8
            HexaDecimal(0 to 9 + A = 10 ,.... F = 15)-- Base = 16


            Decimal to Binary. 10(10) = 1010(2)
                                7(10) = 111(2)



            Conversion:

            Decimal to Base b:
                1.Keep dividing the base
                2. Take Remainders
                3. Write in Opposite (Bottom to Top)


            example: 17(10) to ?(2)
                    Divide 17 with 2. until ends.
                    8 , Remainder = 1.
                    4, Remainder = 0
                    2, Remainder = 0
                    1, Remainder = 0.

            17 in Binary is : 10001

            example2: 17(10) to ?(8)
                Divide 17 with 8 until end
                2, Remainder = 1

                17 in Octal is 21





            Base b to Decimal:
                1.Multiply and add the power of base with digits.

                example1: Binary to Decimal:
                    10001(2) to ?(10):
                        1. Multiply and add the powers of base with digit.

                        1 * 2power4 + 0 * 2^3 + 0 * 2^2 + 0 * 2^1 + 1 * 2^0
                       ==> 1 * 16 + 0 + 0 + 0 + 1
                       ==> 17 in Base 10

                example2: Octal to Decimal
                        21(8) to ?(10):
                            2 * 8^1 + 1 * 8^0
                            ==> 16 + 1
                            ==> 17




    Shifting Operators:
        Observations:
            Left shifting any number will double the number.
            a<<b ==> a*2^b


        Left Shift Operator(<<):
            10(10) = 1010(2)
            10 << 1
            step1: 1010 << 1 ==> 10100


        Right Shift Operator(>>):
            0011001 >> 1 ==> 001100
            Here, Lsb is removed.

